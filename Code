# This program uses an artificial neural network called  Long Short Term Memory(LSTM)
# to predict the closing stock price of a corporation (Apple Inc.) using the past 60 day stock price.
# Import the libraries
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
# To get the stock data
df=web.DataReader('AAPL',data_source='yahoo',start='2012-01-01',end='2021-11-16')
# To show the data
df
# To get the number of rows and columns in the dataset
df.shape
# Visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('Close price history')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD($)',fontsize=18)
plt.show()
# create a new dataframe with close column
data=df.filter(['Close'])
# convert the dataframe to a numpy array
dataset=data.values
dataset
# get the number of rows to train the model on
training_data_len=math.ceil(len(dataset)*.8)
training_data_len
# Scale the data
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(dataset)
scaled_data
# Create a scaled training dataset
train_data=scaled_data[0:training_data_len,:]
train_data
# Split the data into x_train and y_train data sets
x_train=[]
y_train=[]
for i in range(60,len(train_data)):
    x_train.append(train_data[i-60:i,0])
    y_train.append(train_data[i,0])
    if i<=60:
        print(x_train)
        print(y_train)
        print()
print(x_train,y_train)
# Convert the x_train and y_train to numpy arrays
x_train,y_train=np.array(x_train),np.array(y_train)
y_train
# Reshape the data
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape
# Build the LSTM model
model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
# Compile the model
model.compile(optimizer='adam',loss='mean_squared_error')
# Train the model
model.fit(x_train,y_train,batch_size=1,epochs=1)
# create the testing dataset
test_data=scaled_data[training_data_len-60:,:]
# create the datasets x_test and y_test
x_test=[]
y_test=dataset[training_data_len:,:]
for i in range(60,len(test_data)):
    x_test.append(test_data[i-60:i,0])
# Convert the data to a numpy array
x_test=np.array(x_test)
# Reshape the data
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))
# Get the models predicted prices
predictions=model.predict(x_test)
predictions=scaler.inverse_transform(predictions)
# get the root mean square error
rmse=np.sqrt(np.mean(predictions-y_test)**2)
rmse
# plot the data
train=data[:training_data_len]
valid=data[training_data_len:]
valid['Predictions']=predictions
# visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD($)',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'],loc='lower right')
plt.show()
# Show the actual and predicted prices
valid
# Get the quote
from sklearn.preprocessing import MinMaxScaler
apple_quote=web.DataReader('AAPL',data_source='yahoo',start='2012-01-01',end='2021-11-16')
# create a new data frame
new_df=apple_quote.filter(['Close'])
# get the last 60 day closing price values and convert the dataframe to an array
last_60_days=new_df[-60:].values
# scale the data to be values between 0 and 1
last_60_days_scaled=scaler.transform(last_60_days)
# create an empty list
X_test=[]
# append the past 60 days
X_test.append(last_60_days_scaled)
# convert the x_test data to a numpy array
X_test=np.array(X_test)
# reshape the data 
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
# get the predicted scaled price
pred_price=model.predict(X_test)
# undo the scaling
pred_price=scaler.inverse_transform(pred_price)
print(pred_price)
apple_quote2=web.DataReader('AAPL',data_source='yahoo',start='2021-11-17',end='2021-11-17')
apple_quote2['Close']
